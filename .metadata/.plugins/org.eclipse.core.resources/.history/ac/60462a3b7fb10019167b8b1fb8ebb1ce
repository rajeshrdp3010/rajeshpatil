import com.fasterxml.jackson.annotation.JsonInclude.Include;
import java.io.File;
import java.io.IOException;
import java.util.Map;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.map.annotate.JsonSerialize;
/**
 *
 * @author steve jin (http://www.doublecloud.org)
 */
public class JacksonDemo
{
  private static ObjectMapper mapper = new ObjectMapper();

  public static void main(String[] args) throws IOException
  {
    parseJson();

    saveJson();

    perfTest();
  }

  public static void parseJson() throws IOException
  {
    String jsonStr = "{ \"author\": \"Steve Jin\", \"title\" : \"vSphere SDK\", \"obj\" : {\"objint\" : {}} }";

    // parsing JSON to generic object
    Object obj = mapper.readValue(jsonStr, Object.class);
    System.out.println("obj type: " + obj.getClass().toString()); // java.util.LinkedHashMap
    System.out.println("obj: " + obj);

    // parsing JSON to Map object
    Map m = mapper.readValue(jsonStr, Map.class);
    System.out.println("map.size: " + m.size());
    for(Object key: m.keySet())
    {
      System.out.println("key:" + key);
    }

    // parsing JSON to concrete Object
    Book book = mapper.readValue(jsonStr, Book.class);
    System.out.println("book: " + book);
    System.out.println("book.author: " + book.author);
    System.out.println("book.obj class: " + book.obj.getClass()); //com.google.gson.internal.LinkedTreeMap
    System.out.println("book.obj: " + book.obj);
  }

  public static void saveJson() throws IOException
  {
    Book book = new Book();
    book.author = "Steve Jin";
    book.title = "VMware vSphere and VI SDK";

    mapper.setSerializationInclusion(JsonSerialize.Inclusion.NON_EMPTY);
    String bookJson = mapper.writeValueAsString(book);
    System.out.println("bookJson: " + bookJson);
  }

  public static void perfTest() throws IOException
  {
    long start = System.nanoTime();

    mapper.readValue(new File("src/main/resources/bigjson.json"), Map[].class);

    long end = System.nanoTime();
    System.out.println("Time taken (nano seconds): " + (end - start));
  }
}
