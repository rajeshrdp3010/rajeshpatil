package com.java8.practise;

import java.util.Arrays;
import java.util.Comparator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class Test {

	public static void main(String[] args) {
		
		List<String> numbers = Arrays.asList("1", "2", "3", "4", "5", "6");
		System.out.println("original empList: " + numbers);
		List<Integer> even = numbers.stream().map(s -> Integer.valueOf(s)).filter(number -> number % 2 == 0)
				.collect(Collectors.toList());
		System.out.println("processed empList, only even numbers: " + even);

		List<Employee> empList = Arrays.asList(new Employee(1, "ted", 34, 10000), new Employee(2, "ben", 56, 150000));

		Map<Integer, List<Employee>> groupByAgeList = empList.stream()
				.collect(Collectors.groupingBy(Employee::getAge, Collectors.toList()));

		Map<Integer, List<Employee>> groupByAge = empList.stream().collect(Collectors.groupingBy(e -> e.getAge()));

		Map<Integer, List<Employee>> groupByAgeLinkedHashMap = empList.stream()
				.collect(Collectors.groupingBy(Employee::getAge, LinkedHashMap::new, Collectors.toList()));

		Map<Character, List<Employee>> groupByAlphabets = empList.stream()
				.collect(Collectors.groupingBy(e -> e.getName().charAt(0)));

		Map<Integer, Employee> linkedHashMap = empList.stream().sorted(Comparator.comparingDouble(Employee::getSalary))
				.collect(Collectors.toMap(Employee::getAge, Function.identity(), (oldVal, newVal) -> newVal,
						LinkedHashMap<Integer, Employee>::new));
		
		Set<String> empNames = empList.stream()
	            .map(Employee::getName)
	            .collect(Collectors.toSet());
		
		String empNamesJoined = empList.stream()
			      .map(Employee::getName)
			      .collect(Collectors.joining(", "))
			      .toString();
		
		Double avgSal = empList.stream()
			      .mapToDouble(Employee::getSalary)
			      .average()
			      .orElseThrow(NoSuchElementException::new);
		
		Integer latestEmpId = empList.stream()
			      .mapToInt(Employee::getId)
			      .max()
			      .orElseThrow(NoSuchElementException::new);
		
		List<Integer> intList = Arrays.asList(2, 4, 5, 6, 8);
	    
	    boolean allEven = intList.stream().allMatch(i -> i % 2 == 0);
	    boolean oneEven = intList.stream().anyMatch(i -> i % 2 == 0);
	    boolean noneMultipleOfThree = intList.stream().noneMatch(i -> i % 3 == 0);
	    
	    List<Integer> numList = Arrays.asList(2, 5, 3, 2, 4, 3);
	    List<Integer> distinctIntList = numList.stream().distinct().collect(Collectors.toList());
	    
	    Employee maxSalEmp = empList.stream()
	    	      .max(Comparator.comparing(Employee::getSalary))
	    	      .orElseThrow(NoSuchElementException::new);
	    
	    Employee firstEmp = empList.stream()
	    	      .min((e1, e2) -> e1.getId() - e2.getId())
	    	      .orElseThrow(NoSuchElementException::new);
	    
	    List<Employee> employees = empList.stream()
	    	      .sorted((e1, e2) -> e1.getName().compareTo(e2.getName()))
	    	      .collect(Collectors.toList());
	    
	    Integer[] empIds = { 1, 2, 3, 4 };
	    
	    Employee employee = Stream.of(empIds)
	      .map(EmployeeRepository::findById)
	      .filter(e -> e != null)
	      .filter(e -> e.getSalary() > 100000)
	      .findFirst()
	      .orElse(null);
	    
	    Stream<Integer> infiniteStream = Stream.iterate(2, i -> i * 2);

	    List<Integer> collect = infiniteStream
	      .skip(3)
	      .limit(5)
	      .collect(Collectors.toList());
	    
	    Long empCount = empList.stream()
	    	      .filter(e -> e.getSalary() > 200000)
	    	      .count();
	    
	    Employee[] arrayOfEmps = {
	            new Employee(1, "Jeff Bezos", 100000.0), 
	            new Employee(2, "Bill Gates", 200000.0), 
	            new Employee(3, "Mark Zuckerberg", 300000.0)
	        };

	        List<Employee> empList = Arrays.asList(arrayOfEmps);
	        
	        empList.stream()
	          .peek(e -> e.salaryIncrement(10.0))
	          .peek(System.out::println)
	          .collect(Collectors.toList())

	    


		System.out.println("test");
	}

}
