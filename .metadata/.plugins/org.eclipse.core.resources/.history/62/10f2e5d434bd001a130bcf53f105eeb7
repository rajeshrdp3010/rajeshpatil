package com.java8.practise;

import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class Test {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		List<String> numbers = Arrays.asList("1", "2", "3", "4", "5", "6");
		System.out.println("original list: " + numbers);
		List<Integer> even = numbers.stream().map(s -> Integer.valueOf(s)).filter(number -> number % 2 == 0)
				.collect(Collectors.toList());
		System.out.println("processed list, only even numbers: " + even);
		
		List<Employee> list = Arrays.asList(new Employee(1,"ted",34,10000),new Employee(2,"ben",34,10000));

		Map<Integer, List<Employee>> groupByAgeList = list.stream().collect(Collectors.groupingBy(Employee::getAge , Collectors.toList()));
		
		Map<Integer, List<Employee>> groupByAge = list.stream().collect(Collectors.groupingBy(e -> e.getAge()));
		
		Map<Integer, List<Employee>> groupByAgeLinkedHashMap = list.stream().collect(Collectors.groupingBy(Employee::getAge,LinkedHashMap::new,Collectors.toList()));
		
		Map<Character, List<Employee>> groupByAlphabets = list.stream().collect(Collectors.groupingBy(e -> e.getName().charAt(0)));
		
		LinkedHashMap<Integer, List<String> map = list
	            .stream()
	            .sorted(Comparator.comparing(p -> p.getAge())) //sort list by ages
	            .collect(Collectors.groupingBy(p -> p.getAge()),
	                    LinkedHashMap::new, //keeps the order
	                    Collectors.mapping(p -> p.getName(), //map name
	                            Collectors.toList())));
	}

}
